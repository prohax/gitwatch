$LastChangedRevision: 104 $
$LastChangedDate: 2009-03-24 17:53:13 +1000 (Tue, 24 Mar 2009) $
$LastChangedBy: tonymorris $


Mission
=======
To provide a library to Scala users for accessing JDBC succintly, creating web applications and having access to
fundamental data structures that are possible in a language and type system as advanced as Scala.


Packages
========

* scalaz
Basic data structures, type-classes that are not specific to any domain

* scalaz.http
Data structures for writing web applications (based on the slinky prototype http://code.google.com/p/slinky2)

* scalaz.database
Data structures for JDBC

* scalaz.test
Automated specification-based testing

* scalaz.parser
Data structures for parsing

* scalaz.concurrent
Actors library for concurrency

* scalaz.geo
Data structures and algorithms for cartography


Some guidelines
===============
1) Higher-kinds are never inferred, therefore they should not appear on implicit functions
e.g. implicit def function[M[_]] can never be used implicitly. The compiler will not enforce this.

2) Sometimes a function has 2 or more type variables, where one or more is always inferred while one or more is not.
This is particularly the case for higher-kinded variables and first-order variables.
e.g. def function[M[_], A](m: M[A]): T = ...
In this example, M is never inferred while A is. This means a user must explicitly pass two type variables where only
one is forced. Instead we may use structural types:

def function[M[_]] = new {
  def apply[A](m: M[A]): T = ...
}

However, this is fraught with problems. The first is performance -- this implementation will use reflection. The
second is a compiler implementation issue:
http://lampsvn.epfl.ch/trac/scala/ticket/1388

Instead, define a local trait:

sealed trait F[M[_]] {
  def apply[A](m: M[A]): T
}

then:

def function[M[_]] = new F[M] {
  def apply[A](m: M[A]): T = ...
}



Instancing
==========
Java
----
ArrayList
HashMap
HashSet
Hashtable
IdentityHashMap
LinkedHashMap
LinkedHashSet
LinkedList
PriorityQueue
Stack
TreeMap
TreeSet
Vector
WeakHashMap
ArrayBlockingQueue
ConcurrentHashMap
ConcurrentLinkedQueue
CopyOnWriteArrayList
CopyOnWriteArraySet
LinkedBlockingQueue
PriorityBlockingQueue
SynchronousQueue

Scala
-----
Unit
TupleN
FunctionN
List
Stream
Option
Array
Either
scala.collection.*
scala.collection.mutable.*
scala.collection.immutable.*

Other
-----
Identity
Continuation
NonEmptyList
Validation
State
Digit
Equal
Order
Show
